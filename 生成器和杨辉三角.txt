#生成器（generator）和杨辉三角
1.generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。
  相当于通过计算下一步来节省储存空间！
2.如何创建generator?
   【1】第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
  >>> L = [x * x for x in range(10)]
  >>> L
  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
  >>> g = (x * x for x in range(10))      #g就是生成器，不会一次计算出一个list，而是按需要即时生成内容
  >>> g
  <generator object <genexpr> at 0x1022ef630>
  
   #如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值
   #generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。
   #我们创建了一个generator后，基本上永远不会调用next()，而是通过for循环来迭代它，并且不需要关心StopIteration的错误。
   #generator非常强大。如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现，即第二种方法
   
   【2】方法二：函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
   def fib(max):                          #Fibonacci数列生成器
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
    return 'done'
   #这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在
   每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。
   #生成器函数并不返回return的值，会返回一个生成器对象。
   
   
   
3.杨辉三角
          1                        
        1   1
      1   2   1
    1   3   3   1
  1   4   6   4   1
1   5   10  10  5   1                   

把每一行看做一个list，试写一个generator，不断输出下一行的list：

分析：经过观察，发现两种杨辉三角的规律：1.下一行的第二个数字总是上一行一二个数字相加，第三个数字总是上一行二三个数字相加，第四个...2.另一种理解：
      下一行总是上一行的本身和除去第一个数字（数字1）之后的自己对应相加。
	  基于上面两种思路，给出两种解法
	  
#思路1的生成器
def pascal_triangle1(n):
    list = [1]
    while n > 0:
       yield list
       list = [1] + [list[x] + list[x + 1] for x in range(len(list) - 1)] + [1]
       n -= 1
    return
for x in pascal_triangle1(5):
    print(x)


#思路2的生成器
def pascal_triangle2(n):    
    list = [1]
    while n > 0:
       yield list
       list = [1] + [x + y for x, y in zip(list[:], list[1:])] + [1]
       n -= 1
    return
for y in pascal_triangle2(10):
    print(y)
	
	  
   
